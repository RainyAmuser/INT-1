# -*- coding: utf-8 -*-
"""Titanic Survival Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zrNCUaJLhWZ9mZsF5KTP4F1B-BsV03FW
"""

from google.colab import files
data = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("titanic_train.csv")

df.head()

df.info()

df.corr()

sns.heatmap(df.isnull(),yticklabels=False,cbar=True,cmap='viridis')

sns.set_style('whitegrid')
sns.countplot(x='Survived',data=df,palette='RdBu_r')

df['Survived'].value_counts()

df['Sex'].value_counts()

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Sex',data=df,palette='RdBu_r')

df['Sex'].head()

sex = pd.get_dummies(df['Sex'],drop_first = True)

df.drop(['Sex','PassengerId','Name','Ticket','Fare'],axis = 1,inplace=True)

df.drop('Cabin',axis = 1,inplace=True)

df = pd.concat([df,sex],axis = 1)

df.info()

df.corr()

embarked=pd.get_dummies(df['Embarked'])

df.drop('Embarked',axis = 1,inplace=True)

df = pd.concat([df,embarked],axis = 1)

df.info()

df.groupby('Pclass').describe()['Age']

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]

    if pd.isnull(Age):

        if Pclass == 1:
            return 37

        elif Pclass == 2:
            return 29

        else:
            return 24

    else:
        return Age

df['Age'] = df[['Age','Pclass']].apply(impute_age,axis=1)

df.info()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df.drop('Survived',axis=1),
                                                    df['Survived'], test_size=0.30,
                                                    random_state=40)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)

y_pred = logmodel.predict(X_test)

y_pred

y_test

from sklearn.metrics import confusion_matrix,accuracy_score

print(confusion_matrix(y_test,y_pred))

131+25+25+87

((131+87)/268)*100

accuracy_score(y_test,y_pred)*100